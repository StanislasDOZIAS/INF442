# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/196ELeogXMGpMAb-AZB5Xkj0KwPsEwxxx

# Imports
"""

import pandas
import matplotlib
import seaborn as sns
from tqdm import tnrange
from tqdm.notebook import tqdm

"""# Conversion functions"""

def str_to_hour(string) :
    hour = int(string[0:2])
    minute = int(string[3:5])
    seconds = int(string[6:8])
    return hour+minute/60+seconds/3600

def date_to_date(date) :
    year = date//10000
    month = (date-year*10000)//100
    day = date-year*10000-month*100
    return month*30+day

"""# Cleaning of the dataset (choice of columns + conversion of 'arrival_time')

## Stop_times
"""

stop_times = pandas.read_csv("data/RATP_GTFS_FULL/stop_times.csv")

stop_times = stop_times.drop(['trip_id', 'departure_time', 'stop_sequence', 'stop_headsign', 'shape_dist_traveled'], axis=1)
stop_times['arrival_time'] = stop_times['arrival_time'].apply(str_to_hour)

stop_times.head()

stop_times.describe()

sns.displot(stop_times['arrival_time'])

"""## Historical"""

calendar = pandas.read_csv("data/historical.csv")
calendar.groupby('date').sum().describe()

nb_jours_historical = 101

historical = pandas.read_csv("data/historical.csv")

historical['arrival_time'] = historical['arrival_time'].apply(str_to_hour)

historical['date'] = historical['date'].apply(date_to_date)

#historical= historical[(historical['date']-291)%7==0] #on prend que les samedis

historical = historical.drop(['stop_name','trip_id','departure_time', 'stop_sequence', 'service_id', 'trip_short_name', 'direction_id', 'date'], axis=1)

historical.head()

historical.describe()

sns.displot(historical['arrival_time'])

"""# Creation of the frequencies"""

def in_slice(arrival_time) :
    if slice_hour<=arrival_time<slice_hour+1 :
        return 1
    else : return 0

for slice_hour in range(24) :
    stop_times['Y_'+str(slice_hour)] = stop_times['arrival_time'].apply(in_slice) / 10 # approximation to have
                                                                                        # comparable frequencies
stop_times = stop_times.drop("arrival_time", axis=1)

stop_times = stop_times.groupby('stop_id').sum()

for slice_hour in range(24) :
    historical['X_'+str(slice_hour)] = historical['arrival_time'].apply(in_slice) / nb_jours_historical #vrai nombres de jours

historical = historical.drop("arrival_time", axis=1)

historical = historical.groupby('stop_id').sum()

historical.head()

historical.describe()

"""# Merging of the two datasets + creation of train_set and test_set"""

dataset = historical.merge(stop_times, left_index=True, right_index=True)

dataset.head()

dataset.describe()

from sklearn.model_selection import train_test_split

train_set, test_set = train_test_split(dataset, test_size=0.2, random_state=0)

train_set.describe()

test_set.describe()

train_set.to_csv('data/train_set.csv', index = False)
test_set.to_csv('data/test_set.csv', index = False)